package main

import "fmt"

//board structure
var tictactoeboard [49]rune = [49]rune{'-', '-', '-', '-', '-', '-', '-',
	'-', '-', '-', '-', '-', '-', '-',
	'-', '-', '-', '-', '-', '-', '-',
	'-', '-', '-', '-', '-', '-', '-',
	'-', '-', '-', '-', '-', '-', '-',
	'-', '-', '-', '-', '-', '-', '-',
	'-', '-', '-', '-', '-', '-', '-'}

//print & display the board
func display() {
	fmt.Println(string(tictactoeboard[0:7]))
	fmt.Println(string(tictactoeboard[7:14]))
	fmt.Println(string(tictactoeboard[14:21]))
	fmt.Println(string(tictactoeboard[21:28]))
	fmt.Println(string(tictactoeboard[28:35]))
	fmt.Println(string(tictactoeboard[35:42]))
	fmt.Println(string(tictactoeboard[42:49]))
}

//checking for winning combos(horizaontal,row and diagonal win)
var Combos [16][8]int = [16][8]int{{0, 1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12, 13}, {14, 15, 16, 17, 18, 19, 20}, {21, 22, 23, 24, 25, 26, 27}, {28, 29, 30, 31, 32, 33, 34}, {35, 36, 37, 38, 39, 40, 41}, {42, 43, 44, 45, 46, 47, 48}, {0, 7, 14, 21, 28, 35, 42}, {1, 8, 15, 22, 29, 36, 43}, {2, 9, 16, 23, 30, 37, 44}, {3, 10, 17, 24, 31, 38, 45}, {4, 11, 18, 25, 32, 39, 46}, {5, 12, 19, 26, 33, 40, 47}, {6, 13, 20, 27, 34, 41, 48}, {0, 8, 16, 24, 32, 40, 48}, {6, 12, 18, 24, 30, 36, 42}}

//print the board
func Combocheck(combo [8]int, player rune) bool {
	return tictactoeboard[combo[0]] == player &&
		tictactoeboard[combo[1]] == player &&
		tictactoeboard[combo[2]] == player &&
		tictactoeboard[combo[3]] == player &&
		tictactoeboard[combo[4]] == player &&
		tictactoeboard[combo[5]] == player &&
		tictactoeboard[combo[6]] == player &&
		tictactoeboard[combo[7]] == player
}

//check for win or tie
func checkwinner(player rune) bool {
	for _, combo := range Combos {
		if Combocheck(combo, player) {
			return true
		}
	}
	return false
}

//take turn
func takeTurn(player rune) {
	fmt.Println("it's player ", string(player), "'s turn")
	fmt.Println("Enter move index (1-49)")
	var move int
	fmt.Scan(&move)
	tictactoeboard[move-1] = player
}

//switch the player
func next() func() rune {
	player := 'R'
	return func() rune {
		if player == 'X' {
			player = 'R'
		} else {
			player = 'X'
		}
		return player
	}
}

//MAIN FUNCTION check if the ball is full
func main() {
	nextPlayer := next()
	for i := 0; i < 49; i++ {
		player := nextPlayer()
		display()
		takeTurn(player)
		if checkwinner(player) {
			display()
			fmt.Println("Player %s wins!\n", string(player))
			break
		}
	}
}
