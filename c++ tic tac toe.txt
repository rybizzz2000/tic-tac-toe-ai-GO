#include <iostream>

using namespace std;

class Board
{
  private:
    const int Combos [16][8] = {{0, 1, 2, 3, 4, 5, 6},{7, 8, 9, 10, 11, 12, 13},{14, 15, 16, 17, 18, 19, 20},
 							    {21, 22, 23, 24, 25, 26, 27},{28, 29, 30, 31, 32, 33, 34},{35, 36, 37, 38, 39, 40, 41},
                                {42, 43, 44, 45, 46, 47, 48},{0, 7, 14, 21, 28, 35, 42},{1, 8, 15, 22, 29, 36, 43},{2, 9, 16, 23, 30, 37, 44},
                                {3, 10, 17, 24, 31, 38, 45},{4, 11, 18, 25, 32, 39, 46},{5, 12, 19, 26, 33, 40, 47},{6, 13, 20, 27, 34, 41, 48},
                                {0, 9, 17, 25, 32, 40, 49},{7, 13, 19, 25, 30, 37, 43}};

    char board [49];

  public:
Board()
    {
      for(int i = 0; i < 49; i++)
        board[i] = ' ';
    }
    
    void displayBoard()
    {
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[0],board[1],board[2],board[3],board[4],board[5],board[6]);
        printf("---------------\n");
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[7],board[8],board[9],board[10],board[11],board[12],board[13]);
        printf("---------------\n");
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[14],board[15],board[16],board[17],board[18],board[19],board[20]);
        printf("---------------\n");
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[21],board[22],board[23],board[24],board[25],board[26],board[27]);
        printf("---------------\n");
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[28],board[29],board[30],board[31],board[32],board[33],board[34]);
        printf("---------------\n");
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[35],board[36],board[37],board[38],board[39],board[40],board[41]);
        printf("---------------\n");
        printf("|%c|%c|%c|%c|%c|%c|%c|\n",board[42],board[43],board[44],board[45],board[46],board[47],board[48]);
    }


    int playerwinner(char player)
    {
        for(int i = 0; i <8; i++)
            if(board[Combos[i][0]] == player && 
               board[Combos[i][1]] == player && 
               board[Combos[i][2]] == player && 
               board[Combos[i][3]] == player && 
               board[Combos[i][4]] == player && 
               board[Combos[i][5]] == player && 
               board[Combos[i][6]] == player && 
               board[Combos[i][7]] == player)
                return 1;
        return 0;
    }

    void add(int move, char player)
    {
      board[move] = player;  
    }  
};

class Game
{
  private:
    Board * board;
    char turns [49] = {'R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R','o','R'};
    int turn_index;

  void take_turn(char player)
  {
    cout << "It's player " << player << "'s' turn." << endl;
    cout << "Enter a move index (1-49): ";
    int move;
    cin >> move;
    board->add(move - 1, player);
  }

  public:
    Game(Board * reqBoard)
    {
      board = reqBoard;
      turn_index = 0;
    }

    bool ended()
    {
      return turn_index >= 49;
    }
    
    void play()
    {
      char player = turns[turn_index];
      turn_index++;
      board->displayBoard();
      take_turn(player);
      if(board->playerwinner(player))
      {
        board->displayBoard();
        cout << "Player " << player << " wins!" << endl;
        turn_index = 49;
      }
    }
};

int main() {
  Board * board = new Board();
  Game * game = new Game(board);

  while(! game->ended())
    game->play();
}